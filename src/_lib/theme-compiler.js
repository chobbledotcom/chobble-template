import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get all theme files and their names
const getThemeFiles = () => {
  const themesDir = path.join(__dirname, "../css");
  const files = fs.readdirSync(themesDir);
  
  const themes = files
    .filter(file => file.startsWith("theme-") && file !== "theme-switcher.scss" && file.endsWith(".scss"))
    .map(file => {
      const name = file.replace("theme-", "").replace(".scss", "");
      const content = fs.readFileSync(path.join(themesDir, file), "utf8");
      return { name, file, content };
    });
  
  return themes;
};

// Extract CSS variables from :root block
const extractRootVariables = (content) => {
  // Match the :root block and extract its contents
  const rootMatch = content.match(/:root\s*{([^}]+)}/);
  if (!rootMatch) return "";
  
  // Return just the variable declarations (without the :root wrapper)
  return rootMatch[1];
};

// Generate compiled theme CSS for theme-switcher
const generateThemeSwitcherContent = () => {
  const themes = getThemeFiles();
  
  // Map theme names to their index
  const themeMapping = {
    "neon": 1,
    "ocean": 2,
    "old-mac": 3,
    "sunset": 4,
    "monochrome": 5,
    "hacker": 6,
    "floral": 7,
    "90s-computer": 8,
    "rainbow": 9
  };
  
  let output = `// Auto-generated theme definitions for theme switcher
// Generated from individual theme-*.scss files
// DO NOT EDIT - This file is automatically generated during build

`;
  
  themes.forEach(theme => {
    const index = themeMapping[theme.name];
    if (index) {
      const variables = extractRootVariables(theme.content);
      output += `html[data-theme="${index}"] {${variables}}\n\n`;
    }
  });
  
  return output;
};

// Configure the theme compiler for Eleventy
const configureThemeCompiler = (eleventyConfig) => {
  // Add a filter to get theme data for use in templates
  eleventyConfig.addFilter("getThemes", () => {
    const themes = getThemeFiles();
    const themeMapping = {
      "neon": { index: 1, displayName: "Neon" },
      "ocean": { index: 2, displayName: "Ocean" },
      "old-mac": { index: 3, displayName: "Old Mac" },
      "sunset": { index: 4, displayName: "Sunset" },
      "monochrome": { index: 5, displayName: "Monochrome" },
      "hacker": { index: 6, displayName: "Hacker" },
      "floral": { index: 7, displayName: "Floral" },
      "90s-computer": { index: 8, displayName: "90s Computer" },
      "rainbow": { index: 9, displayName: "Rainbow" }
    };
    
    return themes.map(theme => ({
      ...theme,
      ...themeMapping[theme.name]
    })).filter(t => t.index);
  });
  
  // Add shortcode to inject compiled themes
  eleventyConfig.addShortcode("compiledThemes", () => {
    return generateThemeSwitcherContent();
  });
};

export { configureThemeCompiler, generateThemeSwitcherContent };