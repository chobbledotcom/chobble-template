import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get all theme files and their names
const getThemeFiles = () => {
  const themesDir = path.join(__dirname, "../css");
  const files = fs.readdirSync(themesDir);
  
  const themes = files
    .filter(file => file.startsWith("theme-") && file !== "theme-switcher.scss" && file !== "theme-switcher-compiled.scss" && file.endsWith(".scss"))
    .map(file => {
      const name = file.replace("theme-", "").replace(".scss", "");
      const content = fs.readFileSync(path.join(themesDir, file), "utf8");
      return { name, file, content };
    })
    .sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically
  
  return themes;
};

// Extract CSS variables from :root block
const extractRootVariables = (content) => {
  // Match the :root block and extract its contents
  const rootMatch = content.match(/:root\s*{([^}]+)}/);
  if (!rootMatch) return "";
  
  // Return just the variable declarations (without the :root wrapper)
  return rootMatch[1];
};

// Convert theme name to display name (e.g., "90s-computer" -> "90s Computer")
const toDisplayName = (name) => {
  return name
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Generate compiled theme CSS for theme-switcher
const generateThemeSwitcherContent = () => {
  const themes = getThemeFiles(); // Already sorted alphabetically
  
  let output = `// Auto-generated theme definitions for theme switcher
// Generated from individual theme-*.scss files
// DO NOT EDIT - This file is automatically generated during build

`;
  
  // Generate theme CSS rules using theme names as identifiers
  themes.forEach((theme) => {
    const variables = extractRootVariables(theme.content);
    output += `html[data-theme="${theme.name}"] {${variables}}\n\n`;
  });
  
  // Generate theme list as CSS custom property for JavaScript access
  output += `// Theme metadata for JavaScript access\n`;
  output += `:root {\n`;
  
  // Create a list of all available themes (including default)
  const themeList = ['default', ...themes.map(t => t.name)];
  output += `  --theme-list: "${themeList.join(',')}";\n`;
  
  // Also include display names
  output += `  --theme-default-name: "Default";\n`;
  themes.forEach((theme) => {
    const displayName = toDisplayName(theme.name);
    output += `  --theme-${theme.name}-name: "${displayName}";\n`;
  });
  
  output += `}\n`;
  
  return output;
};

// Configure the theme compiler for Eleventy
const configureThemeCompiler = (eleventyConfig) => {
  // Add a filter to get theme data for use in templates
  eleventyConfig.addFilter("getThemes", () => {
    const themes = getThemeFiles(); // Already sorted alphabetically
    
    return themes.map((theme, index) => ({
      ...theme,
      index: index + 1, // Start from 1 (0 is reserved for default theme)
      displayName: toDisplayName(theme.name)
    }));
  });
  
  // Add shortcode to inject compiled themes
  eleventyConfig.addShortcode("compiledThemes", () => {
    return generateThemeSwitcherContent();
  });
  
  // Add a filter to get theme count
  eleventyConfig.addFilter("getThemeCount", () => {
    return getThemeFiles().length + 1; // +1 for the default theme
  });
};

export { configureThemeCompiler, generateThemeSwitcherContent };